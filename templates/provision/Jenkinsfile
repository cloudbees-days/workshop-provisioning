pipeline {
   agent any
   environment {
      TF_VAR_bucket = "${bucket}"
      TF_VAR_project = "${project}"
      TF_VAR_domain_zone = "${domainZone}"
      TF_VAR_domain = "${domain}"
      TF_VAR_region = "${region}"
      TF_VAR_cluster_name = "${clusterName}"
      TF_VAR_node_count = "${initialNodeCount}"
      TF_VAR_min_node_count = "${minNodeCount}"
      TF_VAR_max_node_count = "${maxNodeCount}"
      TF_VAR_secondary_node_count = "${secondaryInitialNodeCount}"
      TF_VAR_secondary_min_node_count = "${secondaryMinNodeCount}"
      TF_VAR_secondary_max_node_count = "${secondaryMaxNodeCount}"
      TF_VAR_oc_memory = "${ocMemory}"
      TF_VAR_oc_cpu = "${ocCpu}"
      TF_VAR_machine_type = "${machineType}"
      TF_VAR_secondary_machine_type = "${secondaryMachineType}"
      CLUSTER_TYPE = "${clusterType}"
      EMAIL = "${email}"
   }
   stages {
      stage('Checkout code') {
         steps {
            git branch: 'master',
            credentialsId: "${githubCredentialId}",
            url: 'https://github.com/cloudbees-days/workshop-provisioning'
         }
      }
      stage('Setup bucket') {
         steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
               sh "gsutil mb gs://${bucket}/"
            }
         }
      }
      stage('Setup cluster') {
         steps {
            dir('terraform/cluster') {
               sh "sed -i 's/my_bucket/'${bucket}'/' main.tf"
               sh 'terraform init'
               sh 'terraform plan'
               input 'Proceed?'
               sh 'terraform apply -auto-approve'
            }
         }
      }
      stage('Setup workshop services') {
         when {
            environment name: "CLUSTER_TYPE", value: "workshop"
         }
         steps {
            dir('terraform/services') {
               sh "sed -i 's/my_bucket/'${bucket}'/' main.tf"
               sh 'terraform init'
               sh 'terraform plan'
               input 'Proceed?'
               sh 'terraform apply -auto-approve'
            }
         }
      }
      stage('Setup vanilla services') {
         when {
            environment name: "CLUSTER_TYPE", value: "vanilla"
         }
         steps {
            dir('terraform/vanilla-services') {
               sh "sed -i 's/my_bucket/'${bucket}'/' main.tf"
               sh 'terraform init'
               sh 'terraform plan'
               input 'Proceed?'
               sh 'terraform apply -auto-approve'
            }
         }
      }
      stage('Setup DNS') {
         steps {
            dir('terraform/dns') {
               sh "sed -i 's/my_bucket/'${bucket}'/' main.tf"
               sh 'terraform init'
               sh 'terraform apply -auto-approve'
            }
         }
      }
      stage('Setup extra') {
         steps {
            sh """
               export KUBECONFIG=terraform/kubeconfig
               kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.14.3/cert-manager-legacy.yaml
               sleep 30
               sed -i 's/REPLACE_EMAIL/'${EMAIL}'/' ./k8s/cluster-issuers.yml
               kubectl apply -f k8s/cluster-issuers.yml
               kubectl apply -f k8s/cjoc-agents.yaml -n cloudbees-core
               gcloud iam service-accounts add-iam-policy-binding \
                  --role roles/iam.workloadIdentityUser \
                  --member "serviceAccount:cb-days-workshop.svc.id.goog[cloudbees-core/jenkins]" \
               workshop-gcr@cb-days-workshop.iam.gserviceaccount.com
               kubectl annotate serviceaccount \
                  --namespace cloudbees-core \
                  jenkins \
                  iam.gke.io/gcp-service-account=workshop-gcr@cb-days-workshop.iam.gserviceaccount.com
            """
         }
      }
   }
}
