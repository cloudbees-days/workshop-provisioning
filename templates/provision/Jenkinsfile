pipeline {
   agent any
   environment {
      TF_VAR_bucket = "${bucket}"
      TF_VAR_project = "${project}"
      TF_VAR_domain_zone = "${domainZone}"
      TF_VAR_domain = "${domain}"
      TF_VAR_region = "${region}"
      TF_VAR_cluster_name = "${clusterName}"
      EMAIL = "${email}"
   }
   stages {
      try {
         stage('Setup bucket') {
            sh "gsutil mb gs://${bucket}/"
         }
      } catch (Exception e) {
         echo "Bucket already exists"
      }
      stage('Setup cluster') {
         steps {
            dir('terraform/cluster') {
               sh "sed -i 's/my_bucket/'${bucket}'/' main.tf"
               sh 'terraform init'
               sh 'terraform apply -auto-approve'
            }
         }
      }
      stage('Setup services') {
         steps {
            dir('terraform/services') {
               sh "sed -i 's/my_bucket/'${bucket}'/' main.tf"
               sh 'terraform init'
               sh 'terraform apply -auto-approve'
            }
         }
      }
      stage('Setup DNS') {
         steps {
            dir('terraform/dns') {
               sh "sed -i 's/my_bucket/'${bucket}'/' main.tf"
               sh 'terraform init'
               sh 'terraform apply -auto-approve'
            }
         }
      }
      stage('Setup extra') {
         steps {
            sh '''
               export KUBECONFIG=terraform/kubeconfig
               kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.14.3/cert-manager-legacy.yaml
               sleep 30
               sed -i 's/REPLACE_EMAIL/'$EMAIL'/' ./k8s/cluster-issuers.yml
               kubectl apply -f k8s/cluster-issuers.yml
               kubectl apply -f k8s/cjoc-agents.yaml -n cloudbees-core
            '''
         }
      }
   }
}
